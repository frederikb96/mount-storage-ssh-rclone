#!/bin/bash

# This script, should mount the storage, and then bindfs the subdirectories to the main mount
# Then its done, and the script should exit

# Stop function
function stop() {
    echo "Stopping..."
    # Unmount all the subdirectories
    for sub in {% for entry in subs %}{{ entry.sub }} {% endfor %}; do
        umount /mnt/storage/{{ sub }}
    done

    # Unmount the main mount
    umount {{ mount_point }}

    # Unmount the rclone mount
    umount {{ mount_sftp }}

    # If any unmounting fails, forcefully unmount all
    cleanup
}

# Cleanup function
function cleanup() {
    # Forcefully unmount all subdirectories
    for sub in {% for entry in subs %}{{ entry.sub }} {% endfor %}; do
        umount -lf /mnt/storage/{{ sub }}
    done

    # Forcefully unmount the main mount
    umount -lf {{ mount_point }}

    # Forcefully unmount the rclone mount
    umount -lf {{ mount_sftp }}
}

# Function to check if mounts are already active
function check_mounts() {
    # Check if any of the mounts are already mounted
    mount | grep -q "{{ mount_point }}" && return 1
    for sub in {% for entry in subs %}{{ entry.sub }} {% endfor %}; do
        mount | grep -q "/mnt/storage/{{ sub }}" && return 1
    done
    return 0
}

# Startup function
function startup() {
    echo "Starting..."

    # Check if mounts are active, if so perform cleanup
    if ! check_mounts; then
        echo "Mounts already active. Cleaning up..."
        cleanup
        if ! check_mounts; then
            echo "Cleanup failed, exiting."
            exit 1
        fi
    fi

    echo "Start main mount"
    if ! timeout 180s rclone mount {{ mount_crypt }}: {{ mount_point }} --allow-non-empty --vfs-cache-mode full --vfs-cache-max-size 100G --vfs-cache-max-age 720h --vfs-disk-space-total-size 5T --uid 0 --gid 0 --attr-timeout 168h --dir-cache-time 720h --poll-interval 168h --cache-dir {{ cache_dir }} --daemon --daemon-wait 180s; then
        stop
        exit 1
    fi
    # Wait for the main mount to become fully ready
    sleep 5

    # Loop through and mount all subdirectories
    for sub in {% for entry in subs %}{{ entry.sub }} {% endfor %}; do
        mkdir -p {{ mount_subs }}/{{ sub }}
        if ! bindfs --map=root/{{ entry.user }}:@root/@{{ entry.user }} /mnt/storage-main/{{ sub }} {{ mount_subs }}/{{ sub }}; then
            stop
            exit 1
        fi
    done

    echo "Startup mount process complete"
}

# Parse command line arguments
case "$1" in
    --start)
        startup
        ;;
    --stop)
        stop
        ;;
    *)
        exit 1
        ;;
esac
