#!/bin/bash

# This script should mount the storage and then bindfs the subdirectories to the main mount.
# Once done, the script should exit.

# Stop function
function stop() {
    echo "Stopping..."
    # Unmount all the subdirectories
    {% for entry in subs %}
    umount {{ mount_subs }}/{{ entry.sub }}
    {% endfor %}

    # Unmount the main mount
    sleep 3
    umount {{ mount_point }}

    # If any unmounting fails, forcefully unmount all
    cleanup
}

# Cleanup function
function cleanup() {
    echo "Cleaning up..."
    # Forcefully unmount all subdirectories
    {% for entry in subs %}
    umount -lf {{ mount_subs }}/{{ entry.sub }}
    {% endfor %}

    # Forcefully unmount the main mount
    sleep 3
    umount -lf {{ mount_point }}
}

# Function to check if mounts are already active
function check_mounts() {
    # Check if any of the mounts are already mounted
    mount | grep -q "{{ mount_point }}" && return 1
    {% for entry in subs %}
    mount | grep -q "{{ mount_subs }}/{{ entry.sub }}" && return 1
    {% endfor %}
    return 0
}

# Startup function
function startup() {
    echo "Starting..."

    # Check if mounts are active, if so perform cleanup
    if ! check_mounts; then
        echo "Mounts already active. Cleaning up..."
        cleanup
        if ! check_mounts; then
            echo "Cleanup failed, exiting."
            exit 1
        fi
    fi

    echo "Start main mount"
    mkdir -p {{ mount_point }}
    if ! timeout 300s rclone mount {{ mount_crypt }}: {{ mount_point }} --allow-non-empty --vfs-cache-mode full --vfs-fast-fingerprint --vfs-cache-max-size 100G --vfs-cache-max-age 720h --vfs-cache-poll-interval 1h --uid 0 --gid 0 --dir-perms 0770 --file-perms 0770 --attr-timeout 720h --dir-cache-time 24h --poll-interval 12h --cache-dir {{ cache_dir }} --daemon; then
        stop
        exit 1
    fi
    # Do a grep on mount and wait for the mount to be ready, but at max 180s
    timeout 300s bash -c 'while ! mount | grep -q "{{ mount_point }}"; do sleep 1; done'
    sleep 2

    # Loop through and mount all subdirectories
    {% for entry in subs %}
    mkdir -p {{ mount_point }}/{{ entry.sub }}
    mkdir -p {{ mount_subs }}/{{ entry.sub }}
    if ! bindfs --map=root/{{ entry.user }}:@root/@{{ entry.user }} {{ mount_point }}/{{ entry.sub }} {{ mount_subs }}/{{ entry.sub }}; then
        stop
        exit 1
    fi
    {% endfor %}

    echo "Startup mount process complete"
}

# Parse command line arguments
case "$1" in
    --start)
        startup
        ;;
    --stop)
        stop
        ;;
    *)
        exit 1
        ;;
esac
