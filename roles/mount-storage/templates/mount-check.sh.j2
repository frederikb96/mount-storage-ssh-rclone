#!/bin/bash

# This script should check SSH mount ping, ensure it's always reachable within a certain timeout, and check if the mounts are all available via grep and the mount points.
# If any of those checks fail, it sends an email and enters a loop where it continuously checks SSH until it becomes available again, and then triggers a server reboot.

# Function to send email if an error occurs and one has not already been sent
function send_email() {
    echo "Sending email..."
    local subject="$1"
    local body="$2"
    echo -e "Subject:${subject}\n\n${body}" | sendmail "{{ sendmail_recipient }}"
}

# SSH check function
# Try to perform a simple `ls` over SSH with a timeout.
# Return 0 if SSH is reachable, 1 if not.
function check_ssh() {
    if ! timeout 10s ssh -p {{ sftp_port }} {{ sftp_user }}@{{ sftp_host }} ls > /dev/null 2>&1; then
        echo "SSH check failed"
        return 1
    fi
    return 0
}

# Full check function
# Perform SSH check and check if the mount points are available using grep.
# Return 0 if everything is ok, 1 if not.
function check() {
    # Check SSH connectivity
    if ! check_ssh; then
        return 1
    fi

    # Check mount points
    {% for entry in subs %}
    if ! mount | grep -q "{{ mount_subs }}/{{ entry.sub }}"; then
        echo "Mount {{ mount_subs }}/{{ entry.sub }} is not available"
        return 1
    fi
    {% endfor %}

    # Check main mount
    if ! mount | grep -q "{{ mount_point }}"; then
        echo "Main mount {{ mount_point }} is not available"
        return 1
    fi

    # If all checks pass
    return 0
}

# Routine function
function routine() {
    echo "Routine started..."
    systemd-notify --ready
    while true; do
        # Perform the full check
        if ! check; then
            echo "Error occurred"
            send_email "ERROR: Mount on {{ sendmail_device }}" "The storage mount is unavailable."
            # Enter a loop to keep checking only SSH until it's available again, then reboot
            while true; do
                if check_ssh; then
                    echo "SSH is available again, rebooting..."
                    send_email "CLEAR: Mount on {{ sendmail_device }}" "SSH is available again. Rebooting..."
                    /usr/bin/systemctl reboot
                fi
                sleep 60  # Wait for a minute before retrying SSH check
            done
        fi
        sleep 60  # Wait for a minute before the next routine check
    done
}

# Execute routine
routine
