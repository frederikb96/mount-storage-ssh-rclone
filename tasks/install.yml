---

- name: Ensure rclone config directory exists
  ansible.builtin.file:
    path: "{{ rclone_config | dirname }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Ensure rclone config file exists only if missing
  ansible.builtin.command: touch "{{ rclone_config }}"
  args:
    creates: "{{ rclone_config }}"

- name: Template rclone config into the file using blockinfile
  ansible.builtin.blockinfile:
    path: "{{ rclone_config }}"
    block: "{{ lookup('template', 'rclone.conf.j2') }}"
    marker: "# {mark} ANSIBLE RCLONE BASIC"
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Create the script directory
  ansible.builtin.file:
    path: "{{ script_dir }}"
    state: directory
    mode: '0755'

- name: Copy the mount-storage script to the script directory
  ansible.builtin.template:
    src: "mount-storage.sh.j2"
    dest: "{{ script_dir }}/{{ script_storage }}"
    mode: '0755'

- name: Copy the mount-check script to the script directory
  ansible.builtin.template:
    src: "mount-check.sh.j2"
    dest: "{{ script_dir }}/{{ script_check }}"
    mode: '0755'

- name: Copy the mount-storage service template to /etc/systemd/system
  ansible.builtin.template:
    src: "mount-storage.service.j2"
    dest: "{{ systemd_dir }}/{{ storage_service_name }}"
    mode: '0644'

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable the mount-storage service
  ansible.builtin.systemd:
    name: "{{ storage_service_name }}"
    enabled: yes

- name: Start the mount-storage service
  ansible.builtin.systemd:
    name: "{{ storage_service_name }}"
    state: started
